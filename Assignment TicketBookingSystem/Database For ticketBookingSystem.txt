-- Step 1: Create the database
CREATE DATABASE TicketBookingSystem;
GO

-- Step 2: Switch to the newly created database
USE TicketBookingSystem;
GO


-- Step 3: Create the Venue table
CREATE TABLE Venue (
    venue_id INT IDENTITY(1,1) PRIMARY KEY,
    venue_name VARCHAR(255) NOT NULL,
    address NVARCHAR(500) NOT NULL
);
GO

-- Step 4: Create the Event table with a foreign key reference to Venue
CREATE TABLE Event (
    event_id INT IDENTITY(1,1) PRIMARY KEY,
    event_name VARCHAR(255) NOT NULL,
    event_date DATE NOT NULL,
    event_time TIME NOT NULL,
    venue_id INT NOT NULL,
    total_seats INT NOT NULL,
    available_seats INT NOT NULL,
    ticket_price DECIMAL(10,2) NOT NULL,
    event_type VARCHAR(50) CHECK (event_type IN ('Movie', 'Sports', 'Concert')),
    FOREIGN KEY (venue_id) REFERENCES Venue(venue_id) ON DELETE CASCADE
);
GO

-- Step 5: Create the Customer table
CREATE TABLE Customer (
    customer_id INT IDENTITY(1,1) PRIMARY KEY,
    customer_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(15) NOT NULL
);
GO

-- Step 6: Create the Booking table with foreign key references to Customer and Event
CREATE TABLE Booking (
    booking_id INT IDENTITY(1,1) PRIMARY KEY,
    customer_id INT NOT NULL,
    event_id INT NOT NULL,
    num_tickets INT NOT NULL,
    total_cost DECIMAL(10,2) NOT NULL,
    booking_date DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES Event(event_id) ON DELETE CASCADE
);
GO

-- Step 7: Verify that all tables were created successfully
SELECT TABLE_NAME 
FROM INFORMATION_SCHEMA.TABLES 
WHERE TABLE_TYPE = 'BASE TABLE';
GO

INSERT INTO Venue (venue_name, address) VALUES
('Chennai Trade Centre', 'Nandambakkam, Chennai, Tamil Nadu'),
('Jawaharlal Nehru Stadium', 'Periamet, Chennai, Tamil Nadu'),
('Kamarajar Arangam', 'Teynampet, Chennai, Tamil Nadu'),
('Coimbatore Codissia', 'Peelamedu, Coimbatore, Tamil Nadu'),
('Madurai Tamukkam Ground', 'Tamukkam, Madurai, Tamil Nadu'),
('Sathyam Cinemas', 'Royapettah, Chennai, Tamil Nadu'),
('PVR Cinemas', 'Phoenix MarketCity, Chennai, Tamil Nadu'),
('VR Mall Cinema', 'Anna Nagar, Chennai, Tamil Nadu'),
('Greenfield Stadium', 'Kariavattom, Thiruvananthapuram, Kerala'),
('Eden Gardens', 'BBD Bagh, Kolkata, West Bengal');

INSERT INTO Event (event_name, event_date, event_time, venue_id, total_seats, available_seats, ticket_price, event_type) VALUES
('IPL Final Cup 2025', '2025-05-20', '19:30:00', 1, 50000, 10000, 2500, 'Sports'),
('India vs Australia T20', '2025-06-10', '18:00:00', 2, 40000, 5000, 2000, 'Sports'),
('Bollywood Night with Arijit Singh', '2025-07-15', '20:00:00', 3, 30000, 7000, 1500, 'Concert'),
('Kollywood Music Awards', '2025-08-25', '19:00:00', 4, 25000, 6000, 1800, 'Concert'),
('Kabaddi League Final', '2025-09-12', '20:30:00', 5, 35000, 8000, 1200, 'Sports'),
('Movie Premiere: Leo 2', '2025-10-01', '21:00:00', 6, 10000, 2000, 1000, 'Movie'),
('Coke Studio Live Chennai', '2025-11-22', '19:00:00', 7, 15000, 5000, 1800, 'Concert'),
('Sunburn Goa', '2025-12-25', '17:00:00', 8, 20000, 4000, 3000, 'Concert'),
('Ranji Trophy Final', '2026-01-18', '14:30:00', 9, 25000, 10000, 900, 'Sports'),
('India vs Pakistan Test Match', '2026-02-28', '10:00:00', 10, 60000, 20000, 2800, 'Sports');



INSERT INTO Customer (customer_name, email, phone_number) VALUES
('Kalki', 'kalki@gmail.com', '9876543210'),
('Manoj', 'manoj@gmail.com', '8765432109'),
('Bharathi', 'bharathi@gmail.com', '9654321098'),
('Dharanish', 'dharanish@gmail.com', '8543210987'),
('Balaji', 'balaji@gmail.com', '9432109876'),
('Sanjay', 'sanjay@gmail.com', '9321098765'),
('Haini', 'haini@gmail.com', '9210987654'),
('Aarthi', 'aarthi@gmail.com', '9109876543'),
('Dhanushkumar', 'dhanushkumar@gmail.com', '9998765432'),
('Abirami', 'abirami@gmail.com', '9888776655');

INSERT INTO Booking (customer_id, event_id, num_tickets, total_cost, booking_date) VALUES
(1, 1, 4, 10000, '2025-04-15'),
(2, 2, 2, 4000, '2025-05-01'),
(3, 3, 5, 7500, '2025-06-10'),
(4, 4, 3, 5400, '2025-07-20'),
(5, 5, 1, 1200, '2025-08-01'),
(6, 6, 2, 2000, '2025-09-05'),
(7, 7, 6, 10800, '2025-10-20'),
(8, 8, 3, 9000, '2025-11-10'),
(9, 9, 2, 1800, '2025-12-15'),
(10, 10, 4, 11200, '2026-01-25');


SELECT * FROM Venue;
SELECT * FROM Event;
SELECT * FROM Customer;
SELECT * FROM Booking;

SELECT e.event_name, SUM(b.total_cost) AS TotalRevenue
FROM Booking join Event e


-- 2: how do i retrieve all events from the event table?
select * from event;

-- 3: how do i find events that still have tickets available?
select * from event where available_seats > 0;

-- 4: how do i find events with 'cup' anywhere in their name?
select * from event where event_name like '%cup%';

-- 5: how do i find events that have ticket prices between ₹1000 and ₹2500?
select * from event where ticket_price between 1000 and 2500;

-- 6: how do i get events happening between june 1st and july 31st, 2025?
select * from event where event_date between '2025-06-01' and '2025-07-31';

-- 7: how do i find available events that include "concert" in their name?
select * from event where available_seats > 0 and event_name like '%concert%';

-- 8: how do i fetch users in groups of 5, skipping the first 5?
select * from customer order by customer_id offset 5 rows fetch next 5 rows only;

-- 9: how do i find bookings where customers booked more than 4 tickets?
select * from booking where num_tickets > 4;

-- 10: how do i find customers whose phone number ends with '000'?
select * from customer where phone_number like '%000';

-- 11: how do i list events with more than 15,000 seats in order?
select * from event where total_seats > 15000 order by total_seats desc;

-- 12: how do i select events whose names do not start with 'x', 'y', or 'z'?
select * from event where event_name not like 'x%' and event_name not like 'y%' and event_name not like 'z%';

--tasks 3: aggregate functions, having, order by, groupby and joins:

-- 1. list events and their average ticket prices
select event_name, avg(ticket_price) as avg_ticket_price from event group by event_name;

-- 2. calculate the total revenue generated by events
select e.event_name, sum(b.total_cost) as total_revenue from booking b join event e on b.event_id = e.event_id
group by e.event_name;

-- 3. find the event with the highest ticket sales
select top 1 e.event_name, sum(b.num_tickets) as total_tickets_sold from booking b
join event e on b.event_id = e.event_id group by e.event_name
order by total_tickets_sold desc;

-- 4. calculate the total number of tickets sold for each event
select e.event_name, sum(b.num_tickets) as total_tickets_sold from booking b
join event e on b.event_id = e.event_id
group by e.event_name;

-- 5. find events with no ticket sales
select e.event_name
from event e
left join booking b on e.event_id = b.event_id
where b.event_id is null;

-- 6. find the user who has booked the most tickets
select top 1 c.customer_name, sum(b.num_tickets) as total_tickets
from booking b
join customer c on b.customer_id = c.customer_id
group by c.customer_name
order by total_tickets desc;

-- 7. list events and the total number of tickets sold for each month
select e.event_name, month(b.booking_date) as month, sum(b.num_tickets) as total_tickets
from booking b
join event e on b.event_id = e.event_id
group by e.event_name, month(b.booking_date)
order by month(b.booking_date);

-- 8. calculate the average ticket price for events in each venue
select v.venue_name, avg(e.ticket_price) as avg_ticket_price
from event e
join venue v on e.venue_id = v.venue_id
group by v.venue_name;

-- 9. calculate the total number of tickets sold for each event type
select e.event_type, sum(b.num_tickets) as total_tickets_sold
from booking b
join event e on b.event_id = e.event_id
group by e.event_type;

-- 10. calculate the total revenue generated by events in each year
select year(e.event_date) as event_year, sum(b.total_cost) as total_revenue
from booking b
join event e on b.event_id = e.event_id
group by year(e.event_date);

-- 11. list users who have booked tickets for multiple events
select c.customer_name, count(distinct b.event_id) as event_count
from booking b
join customer c on b.customer_id = c.customer_id
group by c.customer_name
having count(distinct b.event_id) > 1;

-- 12. calculate the total revenue generated by events for each user
select c.customer_name, sum(b.total_cost) as total_revenue
from booking b
join customer c on b.customer_id = c.customer_id
group by c.customer_name;

-- 13. calculate the average ticket price for events in each category and venue
select e.event_type, v.venue_name, avg(e.ticket_price) as avg_ticket_price
from event e
join venue v on e.venue_id = v.venue_id
group by e.event_type, v.venue_name;

-- 14. list users and the total number of tickets they've purchased in the last 30 days
select c.customer_name, sum(b.num_tickets) as total_tickets
from booking b
join customer c on b.customer_id = c.customer_id
where b.booking_date >= dateadd(day, -30, getdate())
group by c.customer_name;

-- tasks 4: subquery and its types

-- 1. calculate the average ticket price for events in each venue using a subquery
select venue_name, 
       (select avg(ticket_price) from event e 
	    where e.venue_id = v.venue_id) as avg_ticket_price
from venue v;

-- 2. find events with more than 50% of tickets sold using a subquery
select event_name 
from event e
where available_seats < (select total_seats / 2 from event where event_id = e.event_id);

-- 3. calculate the total number of tickets sold for each event
select event_name, 
       (select sum(num_tickets) from booking b 
        where b.event_id = e.event_id) as total_tickets_sold
from event e;

-- 4. find users who have not booked any tickets using a not exists subquery
select customer_name 
from customer c
where not exists (select 1 from booking b where b.customer_id = c.customer_id);

-- 5. list events with no ticket sales using a not in subquery
select event_name 
from event 
where event_id not in (select distinct event_id from booking);

-- 6. calculate the total number of tickets sold for each event type using a subquery in the from clause
select event_type, sum(total_tickets_sold) as total_tickets
from (
    select e.event_type, sum(b.num_tickets) as total_tickets_sold from booking b
    join event e on b.event_id = e.event_id
    group by e.event_type
) as ticketsummary
group by event_type;

-- 7. find events with ticket prices higher than the average ticket price using a subquery in the where clause
select event_name, ticket_price 
from event 
where ticket_price > (select avg(ticket_price) from event);

-- 8. calculate the total revenue generated by events for each user using a correlated subquery
select customer_name, 
       (select sum(b.total_cost) from booking b 
        where b.customer_id = c.customer_id) as total_revenue
from customer c;

-- 9. list users who have booked tickets for events in a given venue using a subquery in the where clause
select customer_name 
from customer 
where customer_id in (
    select distinct b.customer_id from booking b 
    join event e on b.event_id = e.event_id 
    where e.venue_id = (select venue_id from venue where venue_name = 'chennai trade centre')
);

-- 10. calculate the total number of tickets sold for each event category using a subquery with group by
select e.event_type, sum(b.num_tickets) as total_tickets_sold from event e
join booking b on e.event_id = b.event_id
group by e.event_type;

-- 11. find users who have booked tickets for events in each month using a subquery with date_format
select customer_name, 
       (select count(*) from booking b 
        where b.customer_id = c.customer_id 
        and month(b.booking_date) = month(getdate()) 
        and year(b.booking_date) = year(getdate())) as tickets_this_month
from customer c;

-- 12. calculate the average ticket price for events in each venue using a subquery
select v.venue_name, avg(e.ticket_price) as avg_ticket_price
from event e
join venue v on e.venue_id = v.venue_id
group by v.venue_name;



